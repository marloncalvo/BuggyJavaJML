/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:26: warning: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method Binary
           if (arr[mid] != key) {
                  ^

TRACE of BinarySearch.Binary(int[],int)
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:6:  	requires arr != null; 
			VALUE: arr	 === REF!val!6
			VALUE: null	 === NULL
			VALUE: arr != null	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:3:  	requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j; arr[i] <= arr[j]; 
			VALUE: \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j; arr[i] <= arr[j]	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:1:  	if (arr.length == 0) ...
			VALUE: arr.length	 === 1
			VALUE: 0	 === 0
			VALUE: arr.length == 0	 === false
			VALUE: (arr.length == 0)	 === false
				Condition = false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:7:  	PossiblyNullDeReference assertion: arr != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:10:  	int low = 0
			VALUE: 0	 === 0
			VALUE: low	 === 0
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:11:  	int high = arr.length
			VALUE: arr.length	 === 1
			VALUE: high	 === 1
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:11:  	PossiblyNullDeReference assertion: arr != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:12:  	int mid = high / 2
			VALUE: high	 === 1
			VALUE: 2	 === 2
			VALUE: high / 2	 === 0
			VALUE: mid	 === 0
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:12:  	ArithmeticOperationRange assertion: !(high == -2147483648 && 2 == -1)
			VALUE: !(high_471_471___21 == -2147483648 && 2 == -1)	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:14:  	//@ loop_invariant 0 <= low && low <= high && high <= arr.length && mid == low + (high - low) / 2;
			VALUE: 0	 === 0
			VALUE: low	 === 0
			VALUE: 0 <= low	 === true
			VALUE: low	 === 0
			VALUE: high	 === 1
			VALUE: low <= high	 === true
			VALUE: 0 <= low && low <= high	 === true
			VALUE: high	 === 1
			VALUE: arr.length	 === 1
			VALUE: high <= arr.length	 === true
			VALUE: 0 <= low && low <= high && high <= arr.length	 === true
			VALUE: mid	 === 0
			VALUE: low	 === 0
			VALUE: high	 === 1
			VALUE: low	 === 0
			VALUE: high - low	 === 1
			VALUE: (high - low)	 === 1
			VALUE: 2	 === 2
			VALUE: (high - low) / 2	 === 0
			VALUE: low + (high - low) / 2	 === 0
			VALUE: mid == low + (high - low) / 2	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:14:  	UndefinedNullDeReference assertion: !(arr != null) || arr != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:14:  	LoopInvariantBeforeLoop assertion: `conditionalResult_31
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:15:  	//@ loop_invariant (\forall int i; 0 <= i && i < low; arr[i] < key);
			VALUE: \forall int i; 0 <= i && i < low; arr[i] < key	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:15:  	LoopInvariantBeforeLoop assertion: (_JML__tmp39)
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:16:  	//@ loop_invariant (\forall int i; high <= i && i < arr.length; key < arr[i]);
			VALUE: \forall int i; high <= i && i < arr.length; key < arr[i]	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:16:  	LoopInvariantBeforeLoop assertion: (_JML__tmp40)
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:14:  	//@ loop_invariant 0 <= low && low <= high && high <= arr.length && mid == low + (high - low) / 2;
			VALUE: 0	 === 0
			VALUE: low	 === 1
			VALUE: 0 <= low	 === true
			VALUE: low	 === 1
			VALUE: high	 === 1
			VALUE: low <= high	 === true
			VALUE: 0 <= low && low <= high	 === true
			VALUE: high	 === 1
			VALUE: arr.length	 === 1
			VALUE: high <= arr.length	 === true
			VALUE: 0 <= low && low <= high && high <= arr.length	 === true
			VALUE: mid	 === 1
			VALUE: low	 === 1
			VALUE: high	 === 1
			VALUE: low	 === 1
			VALUE: high - low	 === 0
			VALUE: (high - low)	 === 0
			VALUE: 2	 === 2
			VALUE: (high - low) / 2	 === 0
			VALUE: low + (high - low) / 2	 === 1
			VALUE: mid == low + (high - low) / 2	 === true
			VALUE: 0 <= low && low <= high && high <= arr.length && mid == low + (high - low) / 2	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:14:  	UndefinedNullDeReference assertion: !(arr != null) || arr != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:15:  	//@ loop_invariant (\forall int i; 0 <= i && i < low; arr[i] < key);
			VALUE: \forall int i; 0 <= i && i < low; arr[i] < key	 === true
			VALUE: (\forall int i; 0 <= i && i < low; arr[i] < key)	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:16:  	//@ loop_invariant (\forall int i; high <= i && i < arr.length; key < arr[i]);
			VALUE: \forall int i; high <= i && i < arr.length; key < arr[i]	 === true
			VALUE: (\forall int i; high <= i && i < arr.length; key < arr[i])	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:17:  	//@ loop_decreases high - low;
			VALUE: high	 === 1
			VALUE: low	 === 1
			VALUE: high - low	 === 0
				Initial value of Loop Decreases expression = 0
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:18:  	Loop test
			VALUE: low	 === 1
			VALUE: high	 === 1
			VALUE: low < high	 === false
			VALUE: low < high && arr[mid] != key	 === false
			VALUE: (low < high && arr[mid] != key)	 === false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:1:  	if (arr[mid] != key) ...
			VALUE: arr	 === REF!val!6
			VALUE: mid	 === 1
			VALUE: arr[mid]	 === 2437
			VALUE: key	 === 0
			VALUE: arr[mid] != key	 === true
			VALUE: (arr[mid] != key)	 === true
				Condition = true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:26:  	PossiblyNullDeReference assertion: arr != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:26:  	PossiblyNegativeIndex assertion: 0 <= mid
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:26:  	PossiblyTooLargeIndex assertion: arr.length > mid
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/BinarySearch/bug12/Repaired/BinarySearch.java:26:  Invalid assertion (PossiblyTooLargeIndex)

1 warning
