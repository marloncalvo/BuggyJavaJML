/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7: warning: The prover cannot establish an assertion (LoopInvariant) in method Inverse
        //@ maintaining 0 <= index && index <= x.length && x.length == y.length;
            ^

TRACE of Inverse.Inverse(int[],int[])
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:4:  	requires x != null; 
			VALUE: x	 === REF!val!6
			VALUE: null	 === NULL
			VALUE: x != null	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:4:  	requires y != null; 
			VALUE: y	 === REF!val!7
			VALUE: null	 === NULL
			VALUE: y != null	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:1:  	if (x.length != y.length) ...
			VALUE: x.length	 === 2147481210
			VALUE: y.length	 === 2147481210
			VALUE: x.length != y.length	 === false
			VALUE: (x.length != y.length)	 === false
				Condition = false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:5:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:5:  	PossiblyNullDeReference assertion: y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:6:  	int index = 0
			VALUE: 0	 === 0
			VALUE: index	 === 0
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	//@ loop_invariant 0 <= index && index <= x.length && x.length == y.length;
			VALUE: 0	 === 0
			VALUE: index	 === 0
			VALUE: 0 <= index	 === true
			VALUE: index	 === 0
			VALUE: x.length	 === 2147481210
			VALUE: index <= x.length	 === true
			VALUE: 0 <= index && index <= x.length	 === true
			VALUE: x.length	 === 2147481210
			VALUE: y.length	 === 2147481210
			VALUE: x.length == y.length	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null && y != null) || y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	LoopInvariantBeforeLoop assertion: `conditionalResult_23
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	//@ loop_invariant (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]);
			VALUE: \forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	LoopInvariantBeforeLoop assertion: (_JML__tmp30)
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	//@ loop_invariant 0 <= index && index <= x.length && x.length == y.length;
			VALUE: 0	 === 0
			VALUE: index	 === 1
			VALUE: 0 <= index	 === true
			VALUE: index	 === 1
			VALUE: x.length	 === 2147481210
			VALUE: index <= x.length	 === true
			VALUE: 0 <= index && index <= x.length	 === true
			VALUE: x.length	 === 2147481210
			VALUE: y.length	 === 2147481210
			VALUE: x.length == y.length	 === true
			VALUE: 0 <= index && index <= x.length && x.length == y.length	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null && y != null) || y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	//@ loop_invariant (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]);
			VALUE: \forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]	 === true
			VALUE: (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i])	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:9:  	//@ loop_decreases x.length - index;
			VALUE: x.length	 === 2147481210
			VALUE: index	 === 1
			VALUE: x.length - index	 === 2147481209
				Initial value of Loop Decreases expression = 2147481209
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:9:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:10:  	Loop test
			VALUE: index	 === 1
			VALUE: x.length	 === 2147481210
			VALUE: index <= x.length	 === true
			VALUE: (index <= x.length)	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:10:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:1:  	LoopDecreasesNonNegative assertion: 0 <= _JML__tmp47
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:1:  	if (x[index] != y[x.length - 1 - index]) ...
			VALUE: x	 === REF!val!6
			VALUE: index	 === 1
			VALUE: x[index]	 === ( - 1 )
			VALUE: y	 === REF!val!7
			VALUE: x.length	 === 2147481210
			VALUE: 1	 === 1
			VALUE: x.length - 1	 === 2147481209
			VALUE: index	 === 1
			VALUE: x.length - 1 - index	 === 2147481208
			VALUE: y[x.length - 1 - index]	 === ( - 1 )
			VALUE: x[index] != y[x.length - 1 - index]	 === false
			VALUE: (x[index] != y[x.length - 1 - index])	 === false
				Condition = false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNegativeIndex assertion: 0 <= index
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyTooLargeIndex assertion: x.length > index
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNullDeReference assertion: y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	ArithmeticOperationRange assertion: !(0 < _JML__tmp52 && 1 < 0) || _JML__tmp52 <= 2147483647 + 1
			VALUE: !(0 < _JML__tmp52 && 1 < 0) || _JML__tmp52 <= 2147483647 + 1	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	ArithmeticOperationRange assertion: !(_JML__tmp52 < 0 && 0 < 1) || -2147483648 + 1 <= _JML__tmp52
			VALUE: !(_JML__tmp52 < 0 && 0 < 1) || -2147483648 + 1 <= _JML__tmp52	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	ArithmeticOperationRange assertion: !(0 < _JML__tmp56 && index < 0) || _JML__tmp56 <= 2147483647 + index
			VALUE: !(0 < _JML__tmp56 && index_385_793___27 < 0) || _JML__tmp56 <= 2147483647 + index_385_793___27	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	ArithmeticOperationRange assertion: !(_JML__tmp56 < 0 && 0 < index) || -2147483648 + index <= _JML__tmp56
			VALUE: !(_JML__tmp56 < 0 && 0 < index_385_793___27) || -2147483648 + index_385_793___27 <= _JML__tmp56	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNegativeIndex assertion: 0 <= _JML__tmp59
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyTooLargeIndex assertion: y.length > _JML__tmp59
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:14:  	index = x[index]
			VALUE: x	 === REF!val!6
			VALUE: index	 === 1
			VALUE: x[index]	 === ( - 1 )
			VALUE: index = x[index]	 === ( - 1 )
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:14:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:14:  	PossiblyNegativeIndex assertion: 0 <= index
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:14:  	PossiblyTooLargeIndex assertion: x.length > index
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	//@ loop_invariant 0 <= index && index <= x.length && x.length == y.length;
			VALUE: 0	 === 0
			VALUE: index	 === ( - 1 )
			VALUE: 0 <= index	 === false
			VALUE: 0 <= index && index <= x.length	 === false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	LoopInvariant assertion: `conditionalResult_70
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  Invalid assertion (LoopInvariant)

/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11: warning: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method Inverse
            if (x[index] != y[x.length - 1 - index]) {
                 ^

TRACE of Inverse.Inverse(int[],int[])
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:4:  	requires x != null; 
			VALUE: x	 === REF!val!6
			VALUE: null	 === NULL
			VALUE: x != null	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:4:  	requires y != null; 
			VALUE: y	 === REF!val!7
			VALUE: null	 === NULL
			VALUE: y != null	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:1:  	if (x.length != y.length) ...
			VALUE: x.length	 === 2147481210
			VALUE: y.length	 === 2147481210
			VALUE: x.length != y.length	 === false
			VALUE: (x.length != y.length)	 === false
				Condition = false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:5:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:5:  	PossiblyNullDeReference assertion: y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:6:  	int index = 0
			VALUE: 0	 === 0
			VALUE: index	 === 0
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	//@ loop_invariant 0 <= index && index <= x.length && x.length == y.length;
			VALUE: 0	 === 0
			VALUE: index	 === 0
			VALUE: 0 <= index	 === true
			VALUE: index	 === 0
			VALUE: x.length	 === 2147481210
			VALUE: index <= x.length	 === true
			VALUE: 0 <= index && index <= x.length	 === true
			VALUE: x.length	 === 2147481210
			VALUE: y.length	 === 2147481210
			VALUE: x.length == y.length	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null && y != null) || y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	LoopInvariantBeforeLoop assertion: `conditionalResult_23
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	//@ loop_invariant (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]);
			VALUE: \forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	LoopInvariantBeforeLoop assertion: (_JML__tmp30)
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	//@ loop_invariant 0 <= index && index <= x.length && x.length == y.length;
			VALUE: 0	 === 0
			VALUE: index	 === 2147481210
			VALUE: 0 <= index	 === true
			VALUE: index	 === 2147481210
			VALUE: x.length	 === 2147481210
			VALUE: index <= x.length	 === true
			VALUE: 0 <= index && index <= x.length	 === true
			VALUE: x.length	 === 2147481210
			VALUE: y.length	 === 2147481210
			VALUE: x.length == y.length	 === true
			VALUE: 0 <= index && index <= x.length && x.length == y.length	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null && y != null) || y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	//@ loop_invariant (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]);
			VALUE: \forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]	 === true
			VALUE: (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i])	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:9:  	//@ loop_decreases x.length - index;
			VALUE: x.length	 === 2147481210
			VALUE: index	 === 2147481210
			VALUE: x.length - index	 === 0
				Initial value of Loop Decreases expression = 0
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:9:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:10:  	Loop test
			VALUE: index	 === 2147481210
			VALUE: x.length	 === 2147481210
			VALUE: index <= x.length	 === true
			VALUE: (index <= x.length)	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:10:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:1:  	LoopDecreasesNonNegative assertion: 0 <= _JML__tmp47
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:1:  	if (x[index] != y[x.length - 1 - index]) ...
			VALUE: x	 === REF!val!6
			VALUE: index	 === 2147481210
			VALUE: x[index]	 === 11
			VALUE: y	 === REF!val!7
			VALUE: x.length	 === 2147481210
			VALUE: 1	 === 1
			VALUE: x.length - 1	 === 2147481209
			VALUE: index	 === 2147481210
			VALUE: x.length - 1 - index	 === ( - 1 )
			VALUE: y[x.length - 1 - index]	 === 11
			VALUE: x[index] != y[x.length - 1 - index]	 === false
			VALUE: (x[index] != y[x.length - 1 - index])	 === false
				Condition = false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNegativeIndex assertion: 0 <= index
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyTooLargeIndex assertion: x.length > index
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  Invalid assertion (PossiblyTooLargeIndex)

/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:9: warning: The prover cannot establish an assertion (LoopDecreases) in method Inverse
        //@ decreases x.length - index;
            ^

TRACE of Inverse.Inverse(int[],int[])
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:4:  	requires x != null; 
			VALUE: x	 === REF!val!6
			VALUE: null	 === NULL
			VALUE: x != null	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:4:  	requires y != null; 
			VALUE: y	 === REF!val!7
			VALUE: null	 === NULL
			VALUE: y != null	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:1:  	if (x.length != y.length) ...
			VALUE: x.length	 === 2147481210
			VALUE: y.length	 === 2147481210
			VALUE: x.length != y.length	 === false
			VALUE: (x.length != y.length)	 === false
				Condition = false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:5:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:5:  	PossiblyNullDeReference assertion: y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:6:  	int index = 0
			VALUE: 0	 === 0
			VALUE: index	 === 0
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	//@ loop_invariant 0 <= index && index <= x.length && x.length == y.length;
			VALUE: 0	 === 0
			VALUE: index	 === 0
			VALUE: 0 <= index	 === true
			VALUE: index	 === 0
			VALUE: x.length	 === 2147481210
			VALUE: index <= x.length	 === true
			VALUE: 0 <= index && index <= x.length	 === true
			VALUE: x.length	 === 2147481210
			VALUE: y.length	 === 2147481210
			VALUE: x.length == y.length	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null && y != null) || y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	LoopInvariantBeforeLoop assertion: `conditionalResult_23
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	//@ loop_invariant (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]);
			VALUE: \forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	LoopInvariantBeforeLoop assertion: (_JML__tmp30)
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	//@ loop_invariant 0 <= index && index <= x.length && x.length == y.length;
			VALUE: 0	 === 0
			VALUE: index	 === 2147480067
			VALUE: 0 <= index	 === true
			VALUE: index	 === 2147480067
			VALUE: x.length	 === 2147481210
			VALUE: index <= x.length	 === true
			VALUE: 0 <= index && index <= x.length	 === true
			VALUE: x.length	 === 2147481210
			VALUE: y.length	 === 2147481210
			VALUE: x.length == y.length	 === true
			VALUE: 0 <= index && index <= x.length && x.length == y.length	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null && y != null) || y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	//@ loop_invariant (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]);
			VALUE: \forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]	 === true
			VALUE: (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i])	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:9:  	//@ loop_decreases x.length - index;
			VALUE: x.length	 === 2147481210
			VALUE: index	 === 2147480067
			VALUE: x.length - index	 === 1143
				Initial value of Loop Decreases expression = 1143
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:9:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:10:  	Loop test
			VALUE: index	 === 2147480067
			VALUE: x.length	 === 2147481210
			VALUE: index <= x.length	 === true
			VALUE: (index <= x.length)	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:10:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:1:  	LoopDecreasesNonNegative assertion: 0 <= _JML__tmp47
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:1:  	if (x[index] != y[x.length - 1 - index]) ...
			VALUE: x	 === REF!val!6
			VALUE: index	 === 2147480067
			VALUE: x[index]	 === 8098
			VALUE: y	 === REF!val!7
			VALUE: x.length	 === 2147481210
			VALUE: 1	 === 1
			VALUE: x.length - 1	 === 2147481209
			VALUE: index	 === 2147480067
			VALUE: x.length - 1 - index	 === 1142
			VALUE: y[x.length - 1 - index]	 === 8098
			VALUE: x[index] != y[x.length - 1 - index]	 === false
			VALUE: (x[index] != y[x.length - 1 - index])	 === false
				Condition = false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNegativeIndex assertion: 0 <= index
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyTooLargeIndex assertion: x.length > index
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNullDeReference assertion: y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	ArithmeticOperationRange assertion: !(0 < _JML__tmp52 && 1 < 0) || _JML__tmp52 <= 2147483647 + 1
			VALUE: !(0 < _JML__tmp52 && 1 < 0) || _JML__tmp52 <= 2147483647 + 1	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	ArithmeticOperationRange assertion: !(_JML__tmp52 < 0 && 0 < 1) || -2147483648 + 1 <= _JML__tmp52
			VALUE: !(_JML__tmp52 < 0 && 0 < 1) || -2147483648 + 1 <= _JML__tmp52	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	ArithmeticOperationRange assertion: !(0 < _JML__tmp56 && index < 0) || _JML__tmp56 <= 2147483647 + index
			VALUE: !(0 < _JML__tmp56 && index_385_793___27 < 0) || _JML__tmp56 <= 2147483647 + index_385_793___27	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	ArithmeticOperationRange assertion: !(_JML__tmp56 < 0 && 0 < index) || -2147483648 + index <= _JML__tmp56
			VALUE: !(_JML__tmp56 < 0 && 0 < index_385_793___27) || -2147483648 + index_385_793___27 <= _JML__tmp56	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNegativeIndex assertion: 0 <= _JML__tmp59
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyTooLargeIndex assertion: y.length > _JML__tmp59
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:14:  	index = x[index]
			VALUE: x	 === REF!val!6
			VALUE: index	 === 2147480067
			VALUE: x[index]	 === 8098
			VALUE: index = x[index]	 === 8098
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:14:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:14:  	PossiblyNegativeIndex assertion: 0 <= index
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:14:  	PossiblyTooLargeIndex assertion: x.length > index
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	//@ loop_invariant 0 <= index && index <= x.length && x.length == y.length;
			VALUE: 0	 === 0
			VALUE: index	 === 8098
			VALUE: 0 <= index	 === true
			VALUE: index	 === 8098
			VALUE: x.length	 === 2147481210
			VALUE: index <= x.length	 === true
			VALUE: 0 <= index && index <= x.length	 === true
			VALUE: x.length	 === 2147481210
			VALUE: y.length	 === 2147481210
			VALUE: x.length == y.length	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null && y != null) || y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	LoopInvariant assertion: `conditionalResult_70
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	//@ loop_invariant (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]);
			VALUE: \forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	LoopInvariant assertion: (_JML__tmp77)
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:9:  	//@ loop_decreases x.length - index;
			VALUE: x.length	 === 2147481210
			VALUE: index	 === 8098
			VALUE: x.length - index	 === 2147473112
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:9:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:9:  	LoopDecreases assertion: _JML__tmp80 < _JML__tmp47
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:9:  Invalid assertion (LoopDecreases)

/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8: warning: The prover cannot establish an assertion (LoopInvariant) in method Inverse
        //@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);
            ^

TRACE of Inverse.Inverse(int[],int[])
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:4:  	requires x != null; 
			VALUE: x	 === REF!val!6
			VALUE: null	 === NULL
			VALUE: x != null	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:4:  	requires y != null; 
			VALUE: y	 === REF!val!7
			VALUE: null	 === NULL
			VALUE: y != null	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:1:  	if (x.length != y.length) ...
			VALUE: x.length	 === 2147480840
			VALUE: y.length	 === 2147480840
			VALUE: x.length != y.length	 === false
			VALUE: (x.length != y.length)	 === false
				Condition = false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:5:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:5:  	PossiblyNullDeReference assertion: y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:6:  	int index = 0
			VALUE: 0	 === 0
			VALUE: index	 === 0
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	//@ loop_invariant 0 <= index && index <= x.length && x.length == y.length;
			VALUE: 0	 === 0
			VALUE: index	 === 0
			VALUE: 0 <= index	 === true
			VALUE: index	 === 0
			VALUE: x.length	 === 2147480840
			VALUE: index <= x.length	 === true
			VALUE: 0 <= index && index <= x.length	 === true
			VALUE: x.length	 === 2147480840
			VALUE: y.length	 === 2147480840
			VALUE: x.length == y.length	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null && y != null) || y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	LoopInvariantBeforeLoop assertion: `conditionalResult_23
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	//@ loop_invariant (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]);
			VALUE: \forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	LoopInvariantBeforeLoop assertion: (_JML__tmp30)
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	//@ loop_invariant 0 <= index && index <= x.length && x.length == y.length;
			VALUE: 0	 === 0
			VALUE: index	 === 165
			VALUE: 0 <= index	 === true
			VALUE: index	 === 165
			VALUE: x.length	 === 2147480840
			VALUE: index <= x.length	 === true
			VALUE: 0 <= index && index <= x.length	 === true
			VALUE: x.length	 === 2147480840
			VALUE: y.length	 === 2147480840
			VALUE: x.length == y.length	 === true
			VALUE: 0 <= index && index <= x.length && x.length == y.length	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null && y != null) || y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	//@ loop_invariant (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]);
			VALUE: \forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]	 === true
			VALUE: (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i])	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:9:  	//@ loop_decreases x.length - index;
			VALUE: x.length	 === 2147480840
			VALUE: index	 === 165
			VALUE: x.length - index	 === 2147480675
				Initial value of Loop Decreases expression = 2147480675
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:9:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:10:  	Loop test
			VALUE: index	 === 165
			VALUE: x.length	 === 2147480840
			VALUE: index <= x.length	 === true
			VALUE: (index <= x.length)	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:10:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:1:  	LoopDecreasesNonNegative assertion: 0 <= _JML__tmp47
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:1:  	if (x[index] != y[x.length - 1 - index]) ...
			VALUE: x	 === REF!val!6
			VALUE: index	 === 165
			VALUE: x[index]	 === 2147474557
			VALUE: y	 === REF!val!7
			VALUE: x.length	 === 2147480840
			VALUE: 1	 === 1
			VALUE: x.length - 1	 === 2147480839
			VALUE: index	 === 165
			VALUE: x.length - 1 - index	 === 2147480674
			VALUE: y[x.length - 1 - index]	 === 2147474557
			VALUE: x[index] != y[x.length - 1 - index]	 === false
			VALUE: (x[index] != y[x.length - 1 - index])	 === false
				Condition = false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNegativeIndex assertion: 0 <= index
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyTooLargeIndex assertion: x.length > index
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNullDeReference assertion: y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	ArithmeticOperationRange assertion: !(0 < _JML__tmp52 && 1 < 0) || _JML__tmp52 <= 2147483647 + 1
			VALUE: !(0 < _JML__tmp52 && 1 < 0) || _JML__tmp52 <= 2147483647 + 1	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	ArithmeticOperationRange assertion: !(_JML__tmp52 < 0 && 0 < 1) || -2147483648 + 1 <= _JML__tmp52
			VALUE: !(_JML__tmp52 < 0 && 0 < 1) || -2147483648 + 1 <= _JML__tmp52	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	ArithmeticOperationRange assertion: !(0 < _JML__tmp56 && index < 0) || _JML__tmp56 <= 2147483647 + index
			VALUE: !(0 < _JML__tmp56 && index_385_793___27 < 0) || _JML__tmp56 <= 2147483647 + index_385_793___27	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	ArithmeticOperationRange assertion: !(_JML__tmp56 < 0 && 0 < index) || -2147483648 + index <= _JML__tmp56
			VALUE: !(_JML__tmp56 < 0 && 0 < index_385_793___27) || -2147483648 + index_385_793___27 <= _JML__tmp56	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyNegativeIndex assertion: 0 <= _JML__tmp59
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:11:  	PossiblyTooLargeIndex assertion: y.length > _JML__tmp59
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:14:  	index = x[index]
			VALUE: x	 === REF!val!6
			VALUE: index	 === 165
			VALUE: x[index]	 === 2147474557
			VALUE: index = x[index]	 === 2147474557
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:14:  	PossiblyNullDeReference assertion: x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:14:  	PossiblyNegativeIndex assertion: 0 <= index
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:14:  	PossiblyTooLargeIndex assertion: x.length > index
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	//@ loop_invariant 0 <= index && index <= x.length && x.length == y.length;
			VALUE: 0	 === 0
			VALUE: index	 === 2147474557
			VALUE: 0 <= index	 === true
			VALUE: index	 === 2147474557
			VALUE: x.length	 === 2147480840
			VALUE: index <= x.length	 === true
			VALUE: 0 <= index && index <= x.length	 === true
			VALUE: x.length	 === 2147480840
			VALUE: y.length	 === 2147480840
			VALUE: x.length == y.length	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null) || x != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	UndefinedNullDeReference assertion: !(x != null && y != null) || y != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:7:  	LoopInvariant assertion: `conditionalResult_70
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	//@ loop_invariant (\forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]);
			VALUE: \forall int i; 0 <= i && i < index; x[i] == y[x.length - 1 - i]	 === false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  	LoopInvariant assertion: (_JML__tmp77)
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/Overfitting/Cardumen/Inverse/bug2/Repaired/Inverse.java:8:  Invalid assertion (LoopInvariant)

4 warnings
