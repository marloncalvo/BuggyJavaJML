/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:14: warning: The prover cannot establish an assertion (LoopInvariant) in method Binary
            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
                ^

TRACE of BinarySearch.Binary(int[],int)
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:6:  	requires arr != null; 
			VALUE: arr	 === REF!val!6
			VALUE: null	 === NULL
			VALUE: arr != null	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:3:  	requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j; arr[i] <= arr[j]; 
			VALUE: \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j; arr[i] <= arr[j]	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:1:  	if (arr.length == 0) ...
			VALUE: arr.length	 === 8778
			VALUE: 0	 === 0
			VALUE: arr.length == 0	 === false
			VALUE: (arr.length == 0)	 === false
				Condition = false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:7:  	PossiblyNullDeReference assertion: arr != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:10:  	int low = 0
			VALUE: 0	 === 0
			VALUE: low	 === 0
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:11:  	int high = arr.length
			VALUE: arr.length	 === 8778
			VALUE: high	 === 8778
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:11:  	PossiblyNullDeReference assertion: arr != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:12:  	int mid = high / 2
			VALUE: high	 === 8778
			VALUE: 2	 === 2
			VALUE: high / 2	 === 4389
			VALUE: mid	 === 4389
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:12:  	ArithmeticOperationRange assertion: !(high == -2147483648 && 2 == -1)
			VALUE: !(high_471_471___21 == -2147483648 && 2 == -1)	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:14:  	//@ loop_invariant 0 <= low && low <= high && high <= arr.length && mid == low + (high - low) / 2;
			VALUE: 0	 === 0
			VALUE: low	 === 0
			VALUE: 0 <= low	 === true
			VALUE: low	 === 0
			VALUE: high	 === 8778
			VALUE: low <= high	 === true
			VALUE: 0 <= low && low <= high	 === true
			VALUE: high	 === 8778
			VALUE: arr.length	 === 8778
			VALUE: high <= arr.length	 === true
			VALUE: 0 <= low && low <= high && high <= arr.length	 === true
			VALUE: mid	 === 4389
			VALUE: low	 === 0
			VALUE: high	 === 8778
			VALUE: low	 === 0
			VALUE: high - low	 === 8778
			VALUE: (high - low)	 === 8778
			VALUE: 2	 === 2
			VALUE: (high - low) / 2	 === 4389
			VALUE: low + (high - low) / 2	 === 4389
			VALUE: mid == low + (high - low) / 2	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:14:  	UndefinedNullDeReference assertion: !(arr != null) || arr != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:14:  	LoopInvariantBeforeLoop assertion: `conditionalResult_31
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:15:  	//@ loop_invariant (\forall int i; 0 <= i && i < low; arr[i] < key);
			VALUE: \forall int i; 0 <= i && i < low; arr[i] < key	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:15:  	LoopInvariantBeforeLoop assertion: (_JML__tmp39)
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:16:  	//@ loop_invariant (\forall int i; high <= i && i < arr.length; key < arr[i]);
			VALUE: \forall int i; high <= i && i < arr.length; key < arr[i]	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:16:  	LoopInvariantBeforeLoop assertion: (_JML__tmp40)
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:14:  	//@ loop_invariant 0 <= low && low <= high && high <= arr.length && mid == low + (high - low) / 2;
			VALUE: 0	 === 0
			VALUE: low	 === 8772
			VALUE: 0 <= low	 === true
			VALUE: low	 === 8772
			VALUE: high	 === 8778
			VALUE: low <= high	 === true
			VALUE: 0 <= low && low <= high	 === true
			VALUE: high	 === 8778
			VALUE: arr.length	 === 8778
			VALUE: high <= arr.length	 === true
			VALUE: 0 <= low && low <= high && high <= arr.length	 === true
			VALUE: mid	 === 8775
			VALUE: low	 === 8772
			VALUE: high	 === 8778
			VALUE: low	 === 8772
			VALUE: high - low	 === 6
			VALUE: (high - low)	 === 6
			VALUE: 2	 === 2
			VALUE: (high - low) / 2	 === 3
			VALUE: low + (high - low) / 2	 === 8775
			VALUE: mid == low + (high - low) / 2	 === true
			VALUE: 0 <= low && low <= high && high <= arr.length && mid == low + (high - low) / 2	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:14:  	UndefinedNullDeReference assertion: !(arr != null) || arr != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:15:  	//@ loop_invariant (\forall int i; 0 <= i && i < low; arr[i] < key);
			VALUE: \forall int i; 0 <= i && i < low; arr[i] < key	 === true
			VALUE: (\forall int i; 0 <= i && i < low; arr[i] < key)	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:16:  	//@ loop_invariant (\forall int i; high <= i && i < arr.length; key < arr[i]);
			VALUE: \forall int i; high <= i && i < arr.length; key < arr[i]	 === true
			VALUE: (\forall int i; high <= i && i < arr.length; key < arr[i])	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:17:  	//@ loop_decreases high - low;
			VALUE: high	 === 8778
			VALUE: low	 === 8772
			VALUE: high - low	 === 6
				Initial value of Loop Decreases expression = 6
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:18:  	Loop test
			VALUE: low	 === 8772
			VALUE: high	 === 8778
			VALUE: low < high	 === true
			VALUE: arr	 === REF!val!6
			VALUE: mid	 === 8775
			VALUE: arr[mid]	 === ( - 2147480143 )
			VALUE: key	 === ( - 2147480144 )
			VALUE: arr[mid] != key	 === true
			VALUE: low < high && arr[mid] != key	 === true
			VALUE: (low < high && arr[mid] != key)	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:18:  	PossiblyNullDeReference assertion: arr != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:18:  	PossiblyNegativeIndex assertion: 0 <= mid
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:18:  	PossiblyTooLargeIndex assertion: arr.length > mid
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:1:  	LoopDecreasesNonNegative assertion: 0 <= _JML__tmp61
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:1:  	if (arr[mid] < key) ...
			VALUE: arr	 === REF!val!6
			VALUE: mid	 === 8775
			VALUE: arr[mid]	 === ( - 2147480143 )
			VALUE: key	 === ( - 2147480144 )
			VALUE: arr[mid] < key	 === false
			VALUE: (arr[mid] < key)	 === false
				Condition = false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:19:  	PossiblyNullDeReference assertion: arr != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:19:  	PossiblyNegativeIndex assertion: 0 <= mid
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:19:  	PossiblyTooLargeIndex assertion: arr.length > mid
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:22:  	high = mid
			VALUE: mid	 === 8775
			VALUE: high = mid	 === 8775
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:24:  	mid = low - (high - low) / 2
			VALUE: low	 === 8772
			VALUE: high	 === 8775
			VALUE: low	 === 8772
			VALUE: high - low	 === 3
			VALUE: (high - low)	 === 3
			VALUE: 2	 === 2
			VALUE: (high - low) / 2	 === 1
			VALUE: low - (high - low) / 2	 === 8771
			VALUE: mid = low - (high - low) / 2	 === 8771
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:24:  	ArithmeticOperationRange assertion: !(0 < high && low < 0) || high <= 2147483647 + low
			VALUE: !(0 < high_471_1007___51 && low_446_947___50 < 0) || high_471_1007___51 <= 2147483647 + low_446_947___50	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:24:  	ArithmeticOperationRange assertion: !(high < 0 && 0 < low) || -2147483648 + low <= high
			VALUE: !(high_471_1007___51 < 0 && 0 < low_446_947___50) || -2147483648 + low_446_947___50 <= high_471_1007___51	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:24:  	ArithmeticOperationRange assertion: !((_JML__tmp76) == -2147483648 && 2 == -1)
			VALUE: !((_JML__tmp76) == -2147483648 && 2 == -1)	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:24:  	ArithmeticOperationRange assertion: !(0 < low && _JML__tmp79 < 0) || low <= 2147483647 + _JML__tmp79
			VALUE: !(0 < low_446_947___50 && _JML__tmp79 < 0) || low_446_947___50 <= 2147483647 + _JML__tmp79	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:24:  	ArithmeticOperationRange assertion: !(low < 0 && 0 < _JML__tmp79) || -2147483648 + _JML__tmp79 <= low
			VALUE: !(low_446_947___50 < 0 && 0 < _JML__tmp79) || -2147483648 + _JML__tmp79 <= low_446_947___50	 === true
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:14:  	//@ loop_invariant 0 <= low && low <= high && high <= arr.length && mid == low + (high - low) / 2;
			VALUE: 0	 === 0
			VALUE: low	 === 8772
			VALUE: 0 <= low	 === true
			VALUE: low	 === 8772
			VALUE: high	 === 8775
			VALUE: low <= high	 === true
			VALUE: 0 <= low && low <= high	 === true
			VALUE: high	 === 8775
			VALUE: arr.length	 === 8778
			VALUE: high <= arr.length	 === true
			VALUE: 0 <= low && low <= high && high <= arr.length	 === true
			VALUE: mid	 === 8771
			VALUE: low	 === 8772
			VALUE: high	 === 8775
			VALUE: low	 === 8772
			VALUE: high - low	 === 3
			VALUE: (high - low)	 === 3
			VALUE: 2	 === 2
			VALUE: (high - low) / 2	 === 1
			VALUE: low + (high - low) / 2	 === 8773
			VALUE: mid == low + (high - low) / 2	 === false
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:14:  	UndefinedNullDeReference assertion: !(arr != null) || arr != null
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:14:  	LoopInvariant assertion: `conditionalResult_92
/home/marloncalvo/workspace/buggyjavajml/NotVerifiedCounterExamples/JMLFaleNegatives/Structural/Cardumen/BinarySearch/bug10/Bug/BinarySearch.java:14:  Invalid assertion (LoopInvariant)

1 warning
